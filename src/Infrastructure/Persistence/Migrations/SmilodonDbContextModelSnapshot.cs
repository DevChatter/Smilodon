// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Smilodon.Infrastructure.Persistence;

#nullable disable

namespace Smilodon.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SmilodonDbContext))]
    partial class SmilodonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "plpgsql");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("accounts_id_seq");

            modelBuilder.HasSequence("encrypted_messages_id_seq");

            modelBuilder.HasSequence("media_attachments_id_seq");

            modelBuilder.HasSequence("statuses_id_seq");

            modelBuilder.Entity("Smilodon.Domain.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("timestamp_id('accounts'::text)");

                    b.Property<string>("ActorType")
                        .HasColumnType("character varying")
                        .HasColumnName("actor_type");

                    b.Property<string[]>("AlsoKnownAs")
                        .HasColumnType("character varying[]")
                        .HasColumnName("also_known_as");

                    b.Property<string>("AvatarContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("avatar_content_type");

                    b.Property<string>("AvatarFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("avatar_file_name");

                    b.Property<int?>("AvatarFileSize")
                        .HasColumnType("integer")
                        .HasColumnName("avatar_file_size");

                    b.Property<string>("AvatarRemoteUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("avatar_remote_url");

                    b.Property<int?>("AvatarStorageSchemaVersion")
                        .HasColumnType("integer")
                        .HasColumnName("avatar_storage_schema_version");

                    b.Property<DateTime?>("AvatarUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("avatar_updated_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DevicesUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("devices_url");

                    b.Property<bool?>("Discoverable")
                        .HasColumnType("boolean")
                        .HasColumnName("discoverable");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("display_name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Domain")
                        .HasColumnType("character varying")
                        .HasColumnName("domain");

                    b.Property<string>("FeaturedCollectionUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("featured_collection_url");

                    b.Property<string>("Fields")
                        .HasColumnType("jsonb")
                        .HasColumnName("fields");

                    b.Property<string>("FollowersUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("followers_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("HeaderContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("header_content_type");

                    b.Property<string>("HeaderFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("header_file_name");

                    b.Property<int?>("HeaderFileSize")
                        .HasColumnType("integer")
                        .HasColumnName("header_file_size");

                    b.Property<string>("HeaderRemoteUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("header_remote_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int?>("HeaderStorageSchemaVersion")
                        .HasColumnType("integer")
                        .HasColumnName("header_storage_schema_version");

                    b.Property<DateTime?>("HeaderUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("header_updated_at");

                    b.Property<bool?>("HideCollections")
                        .HasColumnType("boolean")
                        .HasColumnName("hide_collections");

                    b.Property<string>("InboxUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("inbox_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("LastWebfingeredAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_webfingered_at");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<bool>("Memorial")
                        .HasColumnType("boolean")
                        .HasColumnName("memorial");

                    b.Property<long?>("MovedToAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("moved_to_account_id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("note")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("OutboxUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("outbox_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("text")
                        .HasColumnName("private_key");

                    b.Property<int>("Protocol")
                        .HasColumnType("integer")
                        .HasColumnName("protocol");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("public_key")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime?>("RequestedReviewAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("requested_review_at");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<DateTime?>("SensitizedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sensitized_at");

                    b.Property<string>("SharedInboxUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("shared_inbox_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("SilencedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("silenced_at");

                    b.Property<DateTime?>("SuspendedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("suspended_at");

                    b.Property<int?>("SuspensionOrigin")
                        .HasColumnType("integer")
                        .HasColumnName("suspension_origin");

                    b.Property<bool?>("Trendable")
                        .HasColumnType("boolean")
                        .HasColumnName("trendable");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("uri")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Url")
                        .HasColumnType("character varying")
                        .HasColumnName("url");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("username")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("accounts_pkey");

                    b.HasIndex("MovedToAccountId")
                        .HasDatabaseName("index_accounts_on_moved_to_account_id")
                        .HasFilter("(moved_to_account_id IS NOT NULL)");

                    b.HasIndex("Uri")
                        .HasDatabaseName("index_accounts_on_uri");

                    b.HasIndex("Url")
                        .HasDatabaseName("index_accounts_on_url")
                        .HasFilter("(url IS NOT NULL)");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Url"), new[] { "text_pattern_ops" });

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountAlias", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Acct")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("acct")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("uri")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("account_aliases_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_account_aliases_on_account_id");

                    b.ToTable("account_aliases", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountConversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long?>("ConversationId")
                        .HasColumnType("bigint")
                        .HasColumnName("conversation_id");

                    b.Property<long?>("LastStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_status_id");

                    b.Property<int>("LockVersion")
                        .HasColumnType("integer")
                        .HasColumnName("lock_version");

                    b.Property<long[]>("ParticipantAccountIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint[]")
                        .HasColumnName("participant_account_ids")
                        .HasDefaultValueSql("'{}'::bigint[]");

                    b.Property<long[]>("StatusIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint[]")
                        .HasColumnName("status_ids")
                        .HasDefaultValueSql("'{}'::bigint[]");

                    b.Property<bool>("Unread")
                        .HasColumnType("boolean")
                        .HasColumnName("unread");

                    b.HasKey("Id")
                        .HasName("account_conversations_pkey");

                    b.HasIndex("ConversationId")
                        .HasDatabaseName("index_account_conversations_on_conversation_id");

                    b.HasIndex("AccountId", "ConversationId", "ParticipantAccountIds")
                        .IsUnique()
                        .HasDatabaseName("index_unique_conversations");

                    b.ToTable("account_conversations", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountDeletionRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_deletion_requests_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_account_deletion_requests_on_account_id");

                    b.ToTable("account_deletion_requests", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountDomainBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Domain")
                        .HasColumnType("character varying")
                        .HasColumnName("domain");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_domain_blocks_pkey");

                    b.HasIndex("AccountId", "Domain")
                        .IsUnique()
                        .HasDatabaseName("index_account_domain_blocks_on_account_id_and_domain");

                    b.ToTable("account_domain_blocks", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountMigration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Acct")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("acct")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("FollowersCount")
                        .HasColumnType("bigint")
                        .HasColumnName("followers_count");

                    b.Property<long?>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_migrations_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_account_migrations_on_account_id");

                    b.HasIndex("TargetAccountId")
                        .HasDatabaseName("index_account_migrations_on_target_account_id")
                        .HasFilter("(target_account_id IS NOT NULL)");

                    b.ToTable("account_migrations", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountModerationNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_moderation_notes_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_account_moderation_notes_on_account_id");

                    b.HasIndex("TargetAccountId")
                        .HasDatabaseName("index_account_moderation_notes_on_target_account_id");

                    b.ToTable("account_moderation_notes", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_notes_pkey");

                    b.HasIndex("TargetAccountId")
                        .HasDatabaseName("index_account_notes_on_target_account_id");

                    b.HasIndex("AccountId", "TargetAccountId")
                        .IsUnique()
                        .HasDatabaseName("index_account_notes_on_account_id_and_target_account_id");

                    b.ToTable("account_notes", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountPin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_pins_pkey");

                    b.HasIndex("TargetAccountId")
                        .HasDatabaseName("index_account_pins_on_target_account_id");

                    b.HasIndex("AccountId", "TargetAccountId")
                        .IsUnique()
                        .HasDatabaseName("index_account_pins_on_account_id_and_target_account_id");

                    b.ToTable("account_pins", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("FollowersCount")
                        .HasColumnType("bigint")
                        .HasColumnName("followers_count");

                    b.Property<long>("FollowingCount")
                        .HasColumnType("bigint")
                        .HasColumnName("following_count");

                    b.Property<DateTime?>("LastStatusAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_status_at");

                    b.Property<long>("StatusesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("statuses_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_stats_pkey");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("index_account_stats_on_account_id");

                    b.ToTable("account_stats", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountStatusesCleanupPolicy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("KeepDirect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("keep_direct")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("KeepMedia")
                        .HasColumnType("boolean")
                        .HasColumnName("keep_media");

                    b.Property<bool>("KeepPinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("keep_pinned")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("KeepPolls")
                        .HasColumnType("boolean")
                        .HasColumnName("keep_polls");

                    b.Property<bool>("KeepSelfBookmark")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("keep_self_bookmark")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("KeepSelfFav")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("keep_self_fav")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("MinFavs")
                        .HasColumnType("integer")
                        .HasColumnName("min_favs");

                    b.Property<int?>("MinReblogs")
                        .HasColumnType("integer")
                        .HasColumnName("min_reblogs");

                    b.Property<int>("MinStatusAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("min_status_age")
                        .HasDefaultValueSql("1209600");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_statuses_cleanup_policies_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_account_statuses_cleanup_policies_on_account_id");

                    b.ToTable("account_statuses_cleanup_policies", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountSummary", b =>
                {
                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Language")
                        .HasColumnType("character varying")
                        .HasColumnName("language");

                    b.Property<bool?>("Sensitive")
                        .HasColumnType("boolean")
                        .HasColumnName("sensitive");

                    b.ToTable((string)null);

                    b.ToView("account_summaries", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountTag", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasIndex("AccountId", "TagId")
                        .HasDatabaseName("index_accounts_tags_on_account_id_and_tag_id");

                    b.HasIndex("TagId", "AccountId")
                        .IsUnique()
                        .HasDatabaseName("index_accounts_tags_on_tag_id_and_account_id");

                    b.ToTable("accounts_tags", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountWarning", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<int>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("OverruledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("overruled_at");

                    b.Property<long?>("ReportId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_id");

                    b.Property<string[]>("StatusIds")
                        .HasColumnType("character varying[]")
                        .HasColumnName("status_ids");

                    b.Property<long?>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_warnings_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_account_warnings_on_account_id");

                    b.HasIndex("ReportId")
                        .HasDatabaseName("ix_account_warnings_report_id");

                    b.HasIndex("TargetAccountId")
                        .HasDatabaseName("index_account_warnings_on_target_account_id");

                    b.ToTable("account_warnings", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountWarningPreset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("account_warning_presets_pkey");

                    b.ToTable("account_warning_presets", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AdminActionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("action")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HumanIdentifier")
                        .HasColumnType("character varying")
                        .HasColumnName("human_identifier");

                    b.Property<string>("Permalink")
                        .HasColumnType("character varying")
                        .HasColumnName("permalink");

                    b.Property<string>("RouteParam")
                        .HasColumnType("character varying")
                        .HasColumnName("route_param");

                    b.Property<long?>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetType")
                        .HasColumnType("character varying")
                        .HasColumnName("target_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("admin_action_logs_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_admin_action_logs_on_account_id");

                    b.HasIndex("TargetType", "TargetId")
                        .HasDatabaseName("index_admin_action_logs_on_target_type_and_target_id");

                    b.ToTable("admin_action_logs", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllDay")
                        .HasColumnType("boolean")
                        .HasColumnName("all_day");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndsAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ends_at");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("published_at");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("scheduled_at");

                    b.Property<DateTime?>("StartsAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("starts_at");

                    b.Property<long[]>("StatusIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("status_ids");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("announcements_pkey");

                    b.ToTable("announcements", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AnnouncementMute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long?>("AnnouncementId")
                        .HasColumnType("bigint")
                        .HasColumnName("announcement_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("announcement_mutes_pkey");

                    b.HasIndex("AnnouncementId")
                        .HasDatabaseName("index_announcement_mutes_on_announcement_id");

                    b.HasIndex("AccountId", "AnnouncementId")
                        .IsUnique()
                        .HasDatabaseName("index_announcement_mutes_on_account_id_and_announcement_id");

                    b.ToTable("announcement_mutes", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AnnouncementReaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long?>("AnnouncementId")
                        .HasColumnType("bigint")
                        .HasColumnName("announcement_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CustomEmojiId")
                        .HasColumnType("bigint")
                        .HasColumnName("custom_emoji_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("announcement_reactions_pkey");

                    b.HasIndex("AnnouncementId")
                        .HasDatabaseName("index_announcement_reactions_on_announcement_id");

                    b.HasIndex("CustomEmojiId")
                        .HasDatabaseName("index_announcement_reactions_on_custom_emoji_id")
                        .HasFilter("(custom_emoji_id IS NOT NULL)");

                    b.HasIndex("AccountId", "AnnouncementId", "Name")
                        .IsUnique()
                        .HasDatabaseName("index_announcement_reactions_on_account_id_and_announcement_id");

                    b.ToTable("announcement_reactions", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Appeal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("AccountWarningId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_warning_id");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_at");

                    b.Property<long?>("ApprovedByAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("approved_by_account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("rejected_at");

                    b.Property<long?>("RejectedByAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("rejected_by_account_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("appeals_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_appeals_on_account_id");

                    b.HasIndex("AccountWarningId")
                        .IsUnique()
                        .HasDatabaseName("index_appeals_on_account_warning_id");

                    b.HasIndex("ApprovedByAccountId")
                        .HasDatabaseName("index_appeals_on_approved_by_account_id")
                        .HasFilter("(approved_by_account_id IS NOT NULL)");

                    b.HasIndex("RejectedByAccountId")
                        .HasDatabaseName("index_appeals_on_rejected_by_account_id")
                        .HasFilter("(rejected_by_account_id IS NOT NULL)");

                    b.ToTable("appeals", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ArInternalMetadatum", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying")
                        .HasColumnName("key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("ar_internal_metadata_pkey");

                    b.ToTable("ar_internal_metadata", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Backup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DumpContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("dump_content_type");

                    b.Property<string>("DumpFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("dump_file_name");

                    b.Property<long?>("DumpFileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("dump_file_size");

                    b.Property<DateTime?>("DumpUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dump_updated_at");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean")
                        .HasColumnName("processed");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("backups_pkey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_backups_user_id");

                    b.ToTable("backups", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Block", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .HasColumnType("character varying")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("blocks_pkey");

                    b.HasIndex("TargetAccountId")
                        .HasDatabaseName("index_blocks_on_target_account_id");

                    b.HasIndex("AccountId", "TargetAccountId")
                        .IsUnique()
                        .HasDatabaseName("index_blocks_on_account_id_and_target_account_id");

                    b.ToTable("blocks", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Bookmark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("bookmarks_pkey");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("index_bookmarks_on_status_id");

                    b.HasIndex("AccountId", "StatusId")
                        .IsUnique()
                        .HasDatabaseName("index_bookmarks_on_account_id_and_status_id");

                    b.ToTable("bookmarks", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CanonicalEmailBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CanonicalEmailHash")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("canonical_email_hash")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("ReferenceAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("reference_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("canonical_email_blocks_pkey");

                    b.HasIndex("CanonicalEmailHash")
                        .IsUnique()
                        .HasDatabaseName("index_canonical_email_blocks_on_canonical_email_hash");

                    b.HasIndex("ReferenceAccountId")
                        .HasDatabaseName("index_canonical_email_blocks_on_reference_account_id");

                    b.ToTable("canonical_email_blocks", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .HasColumnType("character varying")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("conversations_pkey");

                    b.HasIndex("Uri")
                        .IsUnique()
                        .HasDatabaseName("index_conversations_on_uri")
                        .HasFilter("(uri IS NOT NULL)");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Uri"), new[] { "text_pattern_ops" });

                    b.ToTable("conversations", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ConversationMute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint")
                        .HasColumnName("conversation_id");

                    b.HasKey("Id")
                        .HasName("conversation_mutes_pkey");

                    b.HasIndex("ConversationId")
                        .HasDatabaseName("ix_conversation_mutes_conversation_id");

                    b.HasIndex("AccountId", "ConversationId")
                        .IsUnique()
                        .HasDatabaseName("index_conversation_mutes_on_account_id_and_conversation_id");

                    b.ToTable("conversation_mutes", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomEmoji", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("disabled");

                    b.Property<string>("Domain")
                        .HasColumnType("character varying")
                        .HasColumnName("domain");

                    b.Property<string>("ImageContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("image_content_type");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("image_file_name");

                    b.Property<int?>("ImageFileSize")
                        .HasColumnType("integer")
                        .HasColumnName("image_file_size");

                    b.Property<string>("ImageRemoteUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("image_remote_url");

                    b.Property<int?>("ImageStorageSchemaVersion")
                        .HasColumnType("integer")
                        .HasColumnName("image_storage_schema_version");

                    b.Property<DateTime?>("ImageUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("image_updated_at");

                    b.Property<string>("Shortcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("shortcode")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .HasColumnType("character varying")
                        .HasColumnName("uri");

                    b.Property<bool>("VisibleInPicker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("visible_in_picker")
                        .HasDefaultValueSql("true");

                    b.HasKey("Id")
                        .HasName("custom_emojis_pkey");

                    b.HasIndex("Shortcode", "Domain")
                        .IsUnique()
                        .HasDatabaseName("index_custom_emojis_on_shortcode_and_domain");

                    b.ToTable("custom_emojis", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomEmojiCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("custom_emoji_categories_pkey");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("index_custom_emoji_categories_on_name");

                    b.ToTable("custom_emoji_categories", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomFilter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<int>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<string[]>("Context")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("context")
                        .HasDefaultValueSql("'{}'::character varying[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("phrase")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("custom_filters_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_custom_filters_on_account_id");

                    b.ToTable("custom_filters", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomFilterKeyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomFilterId")
                        .HasColumnType("bigint")
                        .HasColumnName("custom_filter_id");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("keyword")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("WholeWord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("whole_word")
                        .HasDefaultValueSql("true");

                    b.HasKey("Id")
                        .HasName("custom_filter_keywords_pkey");

                    b.HasIndex("CustomFilterId")
                        .HasDatabaseName("index_custom_filter_keywords_on_custom_filter_id");

                    b.ToTable("custom_filter_keywords", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomFilterStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomFilterId")
                        .HasColumnType("bigint")
                        .HasColumnName("custom_filter_id");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("custom_filter_statuses_pkey");

                    b.HasIndex("CustomFilterId")
                        .HasDatabaseName("index_custom_filter_statuses_on_custom_filter_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("index_custom_filter_statuses_on_status_id");

                    b.ToTable("custom_filter_statuses", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccessTokenId")
                        .HasColumnType("bigint")
                        .HasColumnName("access_token_id");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("device_id")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("FingerprintKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("fingerprint_key")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("IdentityKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("devices_pkey");

                    b.HasIndex("AccessTokenId")
                        .HasDatabaseName("index_devices_on_access_token_id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_devices_on_account_id");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.DomainAllow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("domain_allows_pkey");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasDatabaseName("index_domain_allows_on_domain");

                    b.ToTable("domain_allows", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.DomainBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<bool>("Obfuscate")
                        .HasColumnType("boolean")
                        .HasColumnName("obfuscate");

                    b.Property<string>("PrivateComment")
                        .HasColumnType("text")
                        .HasColumnName("private_comment");

                    b.Property<string>("PublicComment")
                        .HasColumnType("text")
                        .HasColumnName("public_comment");

                    b.Property<bool>("RejectMedia")
                        .HasColumnType("boolean")
                        .HasColumnName("reject_media");

                    b.Property<bool>("RejectReports")
                        .HasColumnType("boolean")
                        .HasColumnName("reject_reports");

                    b.Property<int?>("Severity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("severity")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("domain_blocks_pkey");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasDatabaseName("index_domain_blocks_on_domain");

                    b.ToTable("domain_blocks", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.EmailDomainBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("email_domain_blocks_pkey");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasDatabaseName("index_email_domain_blocks_on_domain");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_email_domain_blocks_parent_id");

                    b.ToTable("email_domain_blocks", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.EncryptedMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("timestamp_id('encrypted_messages'::text)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("body")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("DeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("device_id");

                    b.Property<string>("Digest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("digest")
                        .HasDefaultValueSql("''::text");

                    b.Property<long?>("FromAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_account_id");

                    b.Property<string>("FromDeviceId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("from_device_id")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("MessageFranking")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("message_franking")
                        .HasDefaultValueSql("''::text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("encrypted_messages_pkey");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("index_encrypted_messages_on_device_id");

                    b.HasIndex("FromAccountId")
                        .HasDatabaseName("index_encrypted_messages_on_from_account_id");

                    b.ToTable("encrypted_messages", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Favourite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("favourites_pkey");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("index_favourites_on_status_id");

                    b.HasIndex("AccountId", "Id")
                        .HasDatabaseName("index_favourites_on_account_id_and_id");

                    b.HasIndex("AccountId", "StatusId")
                        .IsUnique()
                        .HasDatabaseName("index_favourites_on_account_id_and_status_id");

                    b.ToTable("favourites", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.FeaturedTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastStatusAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_status_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long>("StatusesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("statuses_count");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("featured_tags_pkey");

                    b.HasIndex("TagId")
                        .HasDatabaseName("index_featured_tags_on_tag_id");

                    b.HasIndex("AccountId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("index_featured_tags_on_account_id_and_tag_id");

                    b.ToTable("featured_tags", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Follow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string[]>("Languages")
                        .HasColumnType("character varying[]")
                        .HasColumnName("languages");

                    b.Property<bool>("Notify")
                        .HasColumnType("boolean")
                        .HasColumnName("notify");

                    b.Property<bool>("ShowReblogs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("show_reblogs")
                        .HasDefaultValueSql("true");

                    b.Property<long>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .HasColumnType("character varying")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("follows_pkey");

                    b.HasIndex("AccountId", "TargetAccountId")
                        .IsUnique()
                        .HasDatabaseName("index_follows_on_account_id_and_target_account_id");

                    b.HasIndex(new[] { "TargetAccountId" }, "index_follows_on_target_account_id")
                        .HasDatabaseName("ix_follows_target_account_id");

                    b.ToTable("follows", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.FollowRecommendation", b =>
                {
                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("Rank")
                        .HasColumnType("numeric")
                        .HasColumnName("rank");

                    b.Property<string[]>("Reason")
                        .HasColumnType("text[]")
                        .HasColumnName("reason");

                    b.ToTable((string)null);

                    b.ToView("follow_recommendations", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.FollowRecommendationSuppression", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("follow_recommendation_suppressions_pkey");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("index_follow_recommendation_suppressions_on_account_id");

                    b.ToTable("follow_recommendation_suppressions", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.FollowRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string[]>("Languages")
                        .HasColumnType("character varying[]")
                        .HasColumnName("languages");

                    b.Property<bool>("Notify")
                        .HasColumnType("boolean")
                        .HasColumnName("notify");

                    b.Property<bool>("ShowReblogs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("show_reblogs")
                        .HasDefaultValueSql("true");

                    b.Property<long>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .HasColumnType("character varying")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("follow_requests_pkey");

                    b.HasIndex("TargetAccountId")
                        .HasDatabaseName("ix_follow_requests_target_account_id");

                    b.HasIndex("AccountId", "TargetAccountId")
                        .IsUnique()
                        .HasDatabaseName("index_follow_requests_on_account_id_and_target_account_id");

                    b.ToTable("follow_requests", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Identity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("provider")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("uid")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("identities_pkey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_identities_on_user_id");

                    b.ToTable("identities", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Import", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DataContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("data_content_type");

                    b.Property<string>("DataFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("data_file_name");

                    b.Property<int?>("DataFileSize")
                        .HasColumnType("integer")
                        .HasColumnName("data_file_size");

                    b.Property<DateTime?>("DataUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_updated_at");

                    b.Property<bool>("Overwrite")
                        .HasColumnType("boolean")
                        .HasColumnName("overwrite");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("imports_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_imports_account_id");

                    b.ToTable("imports", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Instance", b =>
                {
                    b.Property<long?>("AccountsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("accounts_count");

                    b.Property<string>("Domain")
                        .HasColumnType("character varying")
                        .HasColumnName("domain");

                    b.ToTable((string)null);

                    b.ToView("instances", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Invite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Autofollow")
                        .HasColumnType("boolean")
                        .HasColumnName("autofollow");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("code")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<int?>("MaxUses")
                        .HasColumnType("integer")
                        .HasColumnName("max_uses");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("Uses")
                        .HasColumnType("integer")
                        .HasColumnName("uses");

                    b.HasKey("Id")
                        .HasName("invites_pkey");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("index_invites_on_code");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_invites_on_user_id");

                    b.ToTable("invites", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.IpBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("comment")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<IPAddress>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("inet")
                        .HasColumnName("ip")
                        .HasDefaultValueSql("'0.0.0.0'::inet");

                    b.Property<int>("Severity")
                        .HasColumnType("integer")
                        .HasColumnName("severity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("ip_blocks_pkey");

                    b.ToTable("ip_blocks", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.List", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("RepliesPolicy")
                        .HasColumnType("integer")
                        .HasColumnName("replies_policy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("lists_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_lists_on_account_id");

                    b.ToTable("lists", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ListAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long?>("FollowId")
                        .HasColumnType("bigint")
                        .HasColumnName("follow_id");

                    b.Property<long>("ListId")
                        .HasColumnType("bigint")
                        .HasColumnName("list_id");

                    b.HasKey("Id")
                        .HasName("list_accounts_pkey");

                    b.HasIndex("FollowId")
                        .HasDatabaseName("index_list_accounts_on_follow_id")
                        .HasFilter("(follow_id IS NOT NULL)");

                    b.HasIndex("AccountId", "ListId")
                        .IsUnique()
                        .HasDatabaseName("index_list_accounts_on_account_id_and_list_id");

                    b.HasIndex("ListId", "AccountId")
                        .HasDatabaseName("index_list_accounts_on_list_id_and_account_id");

                    b.ToTable("list_accounts", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.LoginActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthenticationMethod")
                        .HasColumnType("character varying")
                        .HasColumnName("authentication_method");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FailureReason")
                        .HasColumnType("character varying")
                        .HasColumnName("failure_reason");

                    b.Property<IPAddress>("Ip")
                        .HasColumnType("inet")
                        .HasColumnName("ip");

                    b.Property<string>("Provider")
                        .HasColumnType("character varying")
                        .HasColumnName("provider");

                    b.Property<bool?>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.Property<string>("UserAgent")
                        .HasColumnType("character varying")
                        .HasColumnName("user_agent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("login_activities_pkey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_login_activities_on_user_id");

                    b.ToTable("login_activities", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Marker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("LastReadId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_read_id");

                    b.Property<int>("LockVersion")
                        .HasColumnType("integer")
                        .HasColumnName("lock_version");

                    b.Property<string>("Timeline")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("timeline")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("markers_pkey");

                    b.HasIndex("UserId", "Timeline")
                        .IsUnique()
                        .HasDatabaseName("index_markers_on_user_id_and_timeline");

                    b.ToTable("markers", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.MediaAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("timestamp_id('media_attachments'::text)");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Blurhash")
                        .HasColumnType("character varying")
                        .HasColumnName("blurhash");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FileContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("file_content_type");

                    b.Property<string>("FileFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("file_file_name");

                    b.Property<int?>("FileFileSize")
                        .HasColumnType("integer")
                        .HasColumnName("file_file_size");

                    b.Property<string>("FileMeta")
                        .HasColumnType("json")
                        .HasColumnName("file_meta");

                    b.Property<int?>("FileStorageSchemaVersion")
                        .HasColumnType("integer")
                        .HasColumnName("file_storage_schema_version");

                    b.Property<DateTime?>("FileUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("file_updated_at");

                    b.Property<int?>("Processing")
                        .HasColumnType("integer")
                        .HasColumnName("processing");

                    b.Property<string>("RemoteUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("remote_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long?>("ScheduledStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("scheduled_status_id");

                    b.Property<string>("Shortcode")
                        .HasColumnType("character varying")
                        .HasColumnName("shortcode");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<string>("ThumbnailContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("thumbnail_content_type");

                    b.Property<string>("ThumbnailFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("thumbnail_file_name");

                    b.Property<int?>("ThumbnailFileSize")
                        .HasColumnType("integer")
                        .HasColumnName("thumbnail_file_size");

                    b.Property<string>("ThumbnailRemoteUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("thumbnail_remote_url");

                    b.Property<DateTime?>("ThumbnailUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("thumbnail_updated_at");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("media_attachments_pkey");

                    b.HasIndex("ScheduledStatusId")
                        .HasDatabaseName("index_media_attachments_on_scheduled_status_id")
                        .HasFilter("(scheduled_status_id IS NOT NULL)");

                    b.HasIndex("Shortcode")
                        .IsUnique()
                        .HasDatabaseName("index_media_attachments_on_shortcode")
                        .HasFilter("(shortcode IS NOT NULL)");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Shortcode"), new[] { "text_pattern_ops" });

                    b.HasIndex("StatusId")
                        .HasDatabaseName("index_media_attachments_on_status_id");

                    b.HasIndex("AccountId", "StatusId")
                        .IsDescending(false, true)
                        .HasDatabaseName("index_media_attachments_on_account_id_and_status_id");

                    b.ToTable("media_attachments", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Mention", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Silent")
                        .HasColumnType("boolean")
                        .HasColumnName("silent");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("mentions_pkey");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("index_mentions_on_status_id");

                    b.HasIndex("AccountId", "StatusId")
                        .IsUnique()
                        .HasDatabaseName("index_mentions_on_account_id_and_status_id");

                    b.ToTable("mentions", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Mute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("HideNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("hide_notifications")
                        .HasDefaultValueSql("true");

                    b.Property<long>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("mutes_pkey");

                    b.HasIndex("TargetAccountId")
                        .HasDatabaseName("index_mutes_on_target_account_id");

                    b.HasIndex("AccountId", "TargetAccountId")
                        .IsUnique()
                        .HasDatabaseName("index_mutes_on_account_id_and_target_account_id");

                    b.ToTable("mutes", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_id");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("activity_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("FromAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_account_id");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("notifications_pkey");

                    b.HasIndex("FromAccountId")
                        .HasDatabaseName("index_notifications_on_from_account_id");

                    b.HasIndex("ActivityId", "ActivityType")
                        .HasDatabaseName("index_notifications_on_activity_id_and_activity_type");

                    b.HasIndex("AccountId", "Id", "Type")
                        .IsDescending(false, true, false)
                        .HasDatabaseName("index_notifications_on_account_id_and_id_and_type");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OAuthAccessGrant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer")
                        .HasColumnName("expires_in");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("redirect_uri");

                    b.Property<long>("ResourceOwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_owner_id");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Scopes")
                        .HasColumnType("character varying")
                        .HasColumnName("scopes");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("oauth_access_grants_pkey");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_oauth_access_grants_application_id");

                    b.HasIndex("ResourceOwnerId")
                        .HasDatabaseName("index_oauth_access_grants_on_resource_owner_id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("index_oauth_access_grants_on_token");

                    b.ToTable("oauth_access_grants", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OAuthAccessToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApplicationId")
                        .HasColumnType("bigint")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("ExpiresIn")
                        .HasColumnType("integer")
                        .HasColumnName("expires_in");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_used_at");

                    b.Property<IPAddress>("LastUsedIp")
                        .HasColumnType("inet")
                        .HasColumnName("last_used_ip");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("character varying")
                        .HasColumnName("refresh_token");

                    b.Property<long?>("ResourceOwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_owner_id");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Scopes")
                        .HasColumnType("character varying")
                        .HasColumnName("scopes");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("oauth_access_tokens_pkey");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_oauth_access_tokens_application_id");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasDatabaseName("index_oauth_access_tokens_on_refresh_token")
                        .HasFilter("(refresh_token IS NOT NULL)");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("RefreshToken"), new[] { "text_pattern_ops" });

                    b.HasIndex("ResourceOwnerId")
                        .HasDatabaseName("index_oauth_access_tokens_on_resource_owner_id")
                        .HasFilter("(resource_owner_id IS NOT NULL)");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("index_oauth_access_tokens_on_token");

                    b.ToTable("oauth_access_tokens", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OAuthApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Confidential")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("confidential")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("OwnerType")
                        .HasColumnType("character varying")
                        .HasColumnName("owner_type");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("redirect_uri");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("scopes")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("secret");

                    b.Property<bool>("Superapp")
                        .HasColumnType("boolean")
                        .HasColumnName("superapp");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("uid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Website")
                        .HasColumnType("character varying")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("oauth_applications_pkey");

                    b.HasIndex("Uid")
                        .IsUnique()
                        .HasDatabaseName("index_oauth_applications_on_uid");

                    b.HasIndex("OwnerId", "OwnerType")
                        .HasDatabaseName("index_oauth_applications_on_owner_id_and_owner_type");

                    b.ToTable("oauth_applications", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OneTimeKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("DeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("device_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("key")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("key_id")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("signature")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("one_time_keys_pkey");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("index_one_time_keys_on_device_id");

                    b.HasIndex("KeyId")
                        .HasDatabaseName("index_one_time_keys_on_key_id");

                    b.ToTable("one_time_keys", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.PgheroSpaceStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CapturedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("captured_at");

                    b.Property<string>("Database")
                        .HasColumnType("text")
                        .HasColumnName("database");

                    b.Property<string>("Relation")
                        .HasColumnType("text")
                        .HasColumnName("relation");

                    b.Property<string>("Schema")
                        .HasColumnType("text")
                        .HasColumnName("schema");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("pghero_space_stats_pkey");

                    b.HasIndex("Database", "CapturedAt")
                        .HasDatabaseName("index_pghero_space_stats_on_database_and_captured_at");

                    b.ToTable("pghero_space_stats", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Poll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long[]>("CachedTallies")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint[]")
                        .HasColumnName("cached_tallies")
                        .HasDefaultValueSql("'{}'::bigint[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("HideTotals")
                        .HasColumnType("boolean")
                        .HasColumnName("hide_totals");

                    b.Property<DateTime?>("LastFetchedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_fetched_at");

                    b.Property<int>("LockVersion")
                        .HasColumnType("integer")
                        .HasColumnName("lock_version");

                    b.Property<bool>("Multiple")
                        .HasColumnType("boolean")
                        .HasColumnName("multiple");

                    b.Property<string[]>("Options")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("options")
                        .HasDefaultValueSql("'{}'::character varying[]");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("VotersCount")
                        .HasColumnType("bigint")
                        .HasColumnName("voters_count");

                    b.Property<long>("VotesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("votes_count");

                    b.HasKey("Id")
                        .HasName("polls_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_polls_on_account_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("index_polls_on_status_id");

                    b.ToTable("polls", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.PollVote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<int>("Choice")
                        .HasColumnType("integer")
                        .HasColumnName("choice");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("PollId")
                        .HasColumnType("bigint")
                        .HasColumnName("poll_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .HasColumnType("character varying")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("poll_votes_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_poll_votes_on_account_id");

                    b.HasIndex("PollId")
                        .HasDatabaseName("index_poll_votes_on_poll_id");

                    b.ToTable("poll_votes", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.PreviewCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("author_name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("AuthorUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("author_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Blurhash")
                        .HasColumnType("character varying")
                        .HasColumnName("blurhash");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("EmbedUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("embed_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("Html")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("html")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("ImageContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("image_content_type");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("image_file_name");

                    b.Property<int?>("ImageFileSize")
                        .HasColumnType("integer")
                        .HasColumnName("image_file_size");

                    b.Property<int?>("ImageStorageSchemaVersion")
                        .HasColumnType("integer")
                        .HasColumnName("image_storage_schema_version");

                    b.Property<DateTime?>("ImageUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("image_updated_at");

                    b.Property<string>("Language")
                        .HasColumnType("character varying")
                        .HasColumnName("language");

                    b.Property<int?>("LinkType")
                        .HasColumnType("integer")
                        .HasColumnName("link_type");

                    b.Property<double?>("MaxScore")
                        .HasColumnType("double precision")
                        .HasColumnName("max_score");

                    b.Property<DateTime?>("MaxScoreAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("max_score_at");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("provider_name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("ProviderUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("provider_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<bool?>("Trendable")
                        .HasColumnType("boolean")
                        .HasColumnName("trendable");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("preview_cards_pkey");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("index_preview_cards_on_url");

                    b.ToTable("preview_cards", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.PreviewCardProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("IconContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("icon_content_type");

                    b.Property<string>("IconFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("icon_file_name");

                    b.Property<long?>("IconFileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("icon_file_size");

                    b.Property<DateTime?>("IconUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("icon_updated_at");

                    b.Property<DateTime?>("RequestedReviewAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("requested_review_at");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<bool?>("Trendable")
                        .HasColumnType("boolean")
                        .HasColumnName("trendable");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("preview_card_providers_pkey");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasDatabaseName("index_preview_card_providers_on_domain");

                    b.ToTable("preview_card_providers", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.PreviewCardStatus", b =>
                {
                    b.Property<long>("PreviewCardId")
                        .HasColumnType("bigint")
                        .HasColumnName("preview_card_id");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.HasIndex("StatusId", "PreviewCardId")
                        .HasDatabaseName("index_preview_cards_statuses_on_status_id_and_preview_card_id");

                    b.ToTable("preview_cards_statuses", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.PreviewCardTrend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Allowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allowed");

                    b.Property<string>("Language")
                        .HasColumnType("character varying")
                        .HasColumnName("language");

                    b.Property<long>("PreviewCardId")
                        .HasColumnType("bigint")
                        .HasColumnName("preview_card_id");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("preview_card_trends_pkey");

                    b.HasIndex("PreviewCardId")
                        .IsUnique()
                        .HasDatabaseName("index_preview_card_trends_on_preview_card_id");

                    b.ToTable("preview_card_trends", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Relay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FollowActivityId")
                        .HasColumnType("character varying")
                        .HasColumnName("follow_activity_id");

                    b.Property<string>("InboxUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("inbox_url")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("relays_pkey");

                    b.ToTable("relays", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("ActionTakenAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("action_taken_at");

                    b.Property<long?>("ActionTakenByAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("action_taken_by_account_id");

                    b.Property<long?>("AssignedAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("assigned_account_id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("comment")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool?>("Forwarded")
                        .HasColumnType("boolean")
                        .HasColumnName("forwarded");

                    b.Property<long[]>("RuleIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("rule_ids");

                    b.Property<long[]>("StatusIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint[]")
                        .HasColumnName("status_ids")
                        .HasDefaultValueSql("'{}'::bigint[]");

                    b.Property<long>("TargetAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .HasColumnType("character varying")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("reports_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_reports_on_account_id");

                    b.HasIndex("ActionTakenByAccountId")
                        .HasDatabaseName("index_reports_on_action_taken_by_account_id")
                        .HasFilter("(action_taken_by_account_id IS NOT NULL)");

                    b.HasIndex("AssignedAccountId")
                        .HasDatabaseName("index_reports_on_assigned_account_id")
                        .HasFilter("(assigned_account_id IS NOT NULL)");

                    b.HasIndex("TargetAccountId")
                        .HasDatabaseName("index_reports_on_target_account_id");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ReportNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("report_notes_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_report_notes_on_account_id");

                    b.HasIndex("ReportId")
                        .HasDatabaseName("index_report_notes_on_report_id");

                    b.ToTable("report_notes", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Rule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("rules_pkey");

                    b.ToTable("rules", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ScheduledStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("Params")
                        .HasColumnType("jsonb")
                        .HasColumnName("params");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("scheduled_at");

                    b.HasKey("Id")
                        .HasName("scheduled_statuses_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_scheduled_statuses_on_account_id");

                    b.HasIndex("ScheduledAt")
                        .HasDatabaseName("index_scheduled_statuses_on_scheduled_at");

                    b.ToTable("scheduled_statuses", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.SessionActivation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccessTokenId")
                        .HasColumnType("bigint")
                        .HasColumnName("access_token_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<IPAddress>("Ip")
                        .HasColumnType("inet")
                        .HasColumnName("ip");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("user_agent")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long?>("WebPushSubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("web_push_subscription_id");

                    b.HasKey("Id")
                        .HasName("session_activations_pkey");

                    b.HasIndex("AccessTokenId")
                        .HasDatabaseName("index_session_activations_on_access_token_id");

                    b.HasIndex("SessionId")
                        .IsUnique()
                        .HasDatabaseName("index_session_activations_on_session_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_session_activations_on_user_id");

                    b.ToTable("session_activations", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("ThingId")
                        .HasColumnType("bigint")
                        .HasColumnName("thing_id");

                    b.Property<string>("ThingType")
                        .HasColumnType("character varying")
                        .HasColumnName("thing_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<string>("Var")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("var");

                    b.HasKey("Id")
                        .HasName("settings_pkey");

                    b.HasIndex("ThingType", "ThingId", "Var")
                        .IsUnique()
                        .HasDatabaseName("index_settings_on_thing_type_and_thing_id_and_var");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.SiteUpload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Blurhash")
                        .HasColumnType("character varying")
                        .HasColumnName("blurhash");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("file_content_type");

                    b.Property<string>("FileFileName")
                        .HasColumnType("character varying")
                        .HasColumnName("file_file_name");

                    b.Property<int?>("FileFileSize")
                        .HasColumnType("integer")
                        .HasColumnName("file_file_size");

                    b.Property<DateTime?>("FileUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("file_updated_at");

                    b.Property<string>("Meta")
                        .HasColumnType("json")
                        .HasColumnName("meta");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Var")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("var")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("site_uploads_pkey");

                    b.HasIndex("Var")
                        .IsUnique()
                        .HasDatabaseName("index_site_uploads_on_var");

                    b.ToTable("site_uploads", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("timestamp_id('statuses'::text)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<long?>("ApplicationId")
                        .HasColumnType("bigint")
                        .HasColumnName("application_id");

                    b.Property<long?>("ConversationId")
                        .HasColumnType("bigint")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_at");

                    b.Property<long?>("InReplyToAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("in_reply_to_account_id");

                    b.Property<long?>("InReplyToId")
                        .HasColumnType("bigint")
                        .HasColumnName("in_reply_to_id");

                    b.Property<string>("Language")
                        .HasColumnType("character varying")
                        .HasColumnName("language");

                    b.Property<bool?>("Local")
                        .HasColumnType("boolean")
                        .HasColumnName("local");

                    b.Property<long[]>("OrderedMediaAttachmentIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("ordered_media_attachment_ids");

                    b.Property<long?>("PollId")
                        .HasColumnType("bigint")
                        .HasColumnName("poll_id");

                    b.Property<long?>("ReblogOfId")
                        .HasColumnType("bigint")
                        .HasColumnName("reblog_of_id");

                    b.Property<bool>("Reply")
                        .HasColumnType("boolean")
                        .HasColumnName("reply");

                    b.Property<bool>("Sensitive")
                        .HasColumnType("boolean")
                        .HasColumnName("sensitive");

                    b.Property<string>("SpoilerText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("spoiler_text")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<bool?>("Trendable")
                        .HasColumnType("boolean")
                        .HasColumnName("trendable");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .HasColumnType("character varying")
                        .HasColumnName("uri");

                    b.Property<string>("Url")
                        .HasColumnType("character varying")
                        .HasColumnName("url");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("statuses_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_statuses_on_account_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("index_statuses_on_deleted_at")
                        .HasFilter("(deleted_at IS NOT NULL)");

                    b.HasIndex("InReplyToAccountId")
                        .HasDatabaseName("index_statuses_on_in_reply_to_account_id")
                        .HasFilter("(in_reply_to_account_id IS NOT NULL)");

                    b.HasIndex("InReplyToId")
                        .HasDatabaseName("index_statuses_on_in_reply_to_id")
                        .HasFilter("(in_reply_to_id IS NOT NULL)");

                    b.HasIndex("Uri")
                        .IsUnique()
                        .HasDatabaseName("index_statuses_on_uri")
                        .HasFilter("(uri IS NOT NULL)");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Uri"), new[] { "text_pattern_ops" });

                    b.HasIndex("Id", "AccountId")
                        .IsDescending(true, false)
                        .HasDatabaseName("index_statuses_public_20200119")
                        .HasFilter("((deleted_at IS NULL) AND (visibility = 0) AND (reblog_of_id IS NULL) AND ((NOT reply) OR (in_reply_to_account_id = account_id)))");

                    b.HasIndex("ReblogOfId", "AccountId")
                        .HasDatabaseName("index_statuses_on_reblog_of_id_and_account_id");

                    b.HasIndex("AccountId", "Id", "Visibility", "UpdatedAt")
                        .IsDescending(false, true, false, false)
                        .HasDatabaseName("index_statuses_20190820")
                        .HasFilter("(deleted_at IS NULL)");

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusEdit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string[]>("MediaDescriptions")
                        .HasColumnType("text[]")
                        .HasColumnName("media_descriptions");

                    b.Property<long[]>("OrderedMediaAttachmentIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("ordered_media_attachment_ids");

                    b.Property<string[]>("PollOptions")
                        .HasColumnType("character varying[]")
                        .HasColumnName("poll_options");

                    b.Property<bool?>("Sensitive")
                        .HasColumnType("boolean")
                        .HasColumnName("sensitive");

                    b.Property<string>("SpoilerText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("spoiler_text")
                        .HasDefaultValueSql("''::text");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("status_edits_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_status_edits_on_account_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("index_status_edits_on_status_id");

                    b.ToTable("status_edits", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusPin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("status_pins_pkey");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("index_status_pins_on_status_id");

                    b.HasIndex("AccountId", "StatusId")
                        .IsUnique()
                        .HasDatabaseName("index_status_pins_on_account_id_and_status_id");

                    b.ToTable("status_pins", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("FavouritesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("favourites_count");

                    b.Property<long>("ReblogsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("reblogs_count");

                    b.Property<long>("RepliesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("replies_count");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("status_stats_pkey");

                    b.HasIndex("StatusId")
                        .IsUnique()
                        .HasDatabaseName("index_status_stats_on_status_id");

                    b.ToTable("status_stats", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusTag", b =>
                {
                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("index_statuses_tags_on_status_id");

                    b.HasIndex("TagId", "StatusId")
                        .IsUnique()
                        .HasDatabaseName("index_statuses_tags_on_tag_id_and_status_id");

                    b.ToTable("statuses_tags", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusTrend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<bool>("Allowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allowed");

                    b.Property<string>("Language")
                        .HasColumnType("character varying")
                        .HasColumnName("language");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<double>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("status_trends_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_status_trends_on_account_id");

                    b.HasIndex("StatusId")
                        .IsUnique()
                        .HasDatabaseName("index_status_trends_on_status_id");

                    b.ToTable("status_trends", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.SystemKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Key")
                        .HasColumnType("bytea")
                        .HasColumnName("key");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("system_keys_pkey");

                    b.ToTable("system_keys", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .HasColumnType("character varying")
                        .HasColumnName("display_name");

                    b.Property<DateTime?>("LastStatusAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_status_at");

                    b.Property<bool?>("Listable")
                        .HasColumnType("boolean")
                        .HasColumnName("listable");

                    b.Property<double?>("MaxScore")
                        .HasColumnType("double precision")
                        .HasColumnName("max_score");

                    b.Property<DateTime?>("MaxScoreAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("max_score_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("RequestedReviewAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("requested_review_at");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<bool?>("Trendable")
                        .HasColumnType("boolean")
                        .HasColumnName("trendable");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool?>("Usable")
                        .HasColumnType("boolean")
                        .HasColumnName("usable");

                    b.HasKey("Id")
                        .HasName("tags_pkey");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.TagFollow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("tag_follows_pkey");

                    b.HasIndex("TagId")
                        .HasDatabaseName("index_tag_follows_on_tag_id");

                    b.HasIndex("AccountId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("index_tag_follows_on_account_id_and_tag_id");

                    b.ToTable("tag_follows", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Tombstone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<bool?>("ByModerator")
                        .HasColumnType("boolean")
                        .HasColumnName("by_moderator");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("tombstones_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_tombstones_on_account_id");

                    b.HasIndex("Uri")
                        .HasDatabaseName("index_tombstones_on_uri");

                    b.ToTable("tombstones", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.UnavailableDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("domain")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("unavailable_domains_pkey");

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasDatabaseName("index_unavailable_domains_on_domain");

                    b.ToTable("unavailable_domains", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean")
                        .HasColumnName("admin");

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("approved")
                        .HasDefaultValueSql("true");

                    b.Property<string[]>("ChosenLanguages")
                        .HasColumnType("character varying[]")
                        .HasColumnName("chosen_languages");

                    b.Property<DateTime?>("ConfirmationSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confirmation_sent_at");

                    b.Property<string>("ConfirmationToken")
                        .HasColumnType("character varying")
                        .HasColumnName("confirmation_token");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<int?>("ConsumedTimestep")
                        .HasColumnType("integer")
                        .HasColumnName("consumed_timestep");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedByApplicationId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_application_id");

                    b.Property<DateTime?>("CurrentSignInAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("current_sign_in_at");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("disabled");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("EncryptedOtpSecret")
                        .HasColumnType("character varying")
                        .HasColumnName("encrypted_otp_secret");

                    b.Property<string>("EncryptedOtpSecretIv")
                        .HasColumnType("character varying")
                        .HasColumnName("encrypted_otp_secret_iv");

                    b.Property<string>("EncryptedOtpSecretSalt")
                        .HasColumnType("character varying")
                        .HasColumnName("encrypted_otp_secret_salt");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("encrypted_password")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long?>("InviteId")
                        .HasColumnType("bigint")
                        .HasColumnName("invite_id");

                    b.Property<DateTime?>("LastEmailedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_emailed_at");

                    b.Property<DateTime?>("LastSignInAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_sign_in_at");

                    b.Property<string>("Locale")
                        .HasColumnType("character varying")
                        .HasColumnName("locale");

                    b.Property<bool>("Moderator")
                        .HasColumnType("boolean")
                        .HasColumnName("moderator");

                    b.Property<string[]>("OtpBackupCodes")
                        .HasColumnType("character varying[]")
                        .HasColumnName("otp_backup_codes");

                    b.Property<bool>("OtpRequiredForLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("otp_required_for_login");

                    b.Property<DateTime?>("ResetPasswordSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reset_password_sent_at");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("character varying")
                        .HasColumnName("reset_password_token");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<int>("SignInCount")
                        .HasColumnType("integer")
                        .HasColumnName("sign_in_count");

                    b.Property<string>("SignInToken")
                        .HasColumnType("character varying")
                        .HasColumnName("sign_in_token");

                    b.Property<DateTime?>("SignInTokenSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sign_in_token_sent_at");

                    b.Property<IPAddress>("SignUpIp")
                        .HasColumnType("inet")
                        .HasColumnName("sign_up_ip");

                    b.Property<bool?>("SkipSignInToken")
                        .HasColumnType("boolean")
                        .HasColumnName("skip_sign_in_token");

                    b.Property<string>("UnconfirmedEmail")
                        .HasColumnType("character varying")
                        .HasColumnName("unconfirmed_email");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WebAuthnId")
                        .HasColumnType("character varying")
                        .HasColumnName("webauthn_id");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("index_users_on_account_id");

                    b.HasIndex("ConfirmationToken")
                        .IsUnique()
                        .HasDatabaseName("index_users_on_confirmation_token");

                    b.HasIndex("CreatedByApplicationId")
                        .HasDatabaseName("index_users_on_created_by_application_id")
                        .HasFilter("(created_by_application_id IS NOT NULL)");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("index_users_on_email");

                    b.HasIndex("InviteId")
                        .HasDatabaseName("ix_users_invite_id");

                    b.HasIndex("ResetPasswordToken")
                        .IsUnique()
                        .HasDatabaseName("index_users_on_reset_password_token")
                        .HasFilter("(reset_password_token IS NOT NULL)");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("ResetPasswordToken"), new[] { "text_pattern_ops" });

                    b.HasIndex("RoleId")
                        .HasDatabaseName("index_users_on_role_id")
                        .HasFilter("(role_id IS NOT NULL)");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.UserInviteRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_invite_requests_pkey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_user_invite_requests_on_user_id");

                    b.ToTable("user_invite_requests", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.UserIp", b =>
                {
                    b.Property<IPAddress>("Ip")
                        .HasColumnType("inet")
                        .HasColumnName("ip");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("used_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("user_ips", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("color")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Highlighted")
                        .HasColumnType("boolean")
                        .HasColumnName("highlighted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("Permissions")
                        .HasColumnType("bigint")
                        .HasColumnName("permissions");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("user_roles_pkey");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.WebAuthnCredential", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("external_id");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nickname");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("public_key");

                    b.Property<long>("SignCount")
                        .HasColumnType("bigint")
                        .HasColumnName("sign_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("webauthn_credentials_pkey");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("index_webauthn_credentials_on_external_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_webauthn_credentials_on_user_id");

                    b.ToTable("webauthn_credentials", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.WebPushSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccessTokenId")
                        .HasColumnType("bigint")
                        .HasColumnName("access_token_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("endpoint");

                    b.Property<string>("KeyAuth")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("key_auth");

                    b.Property<string>("KeyP256dh")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("key_p256dh");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("web_push_subscriptions_pkey");

                    b.HasIndex("AccessTokenId")
                        .HasDatabaseName("index_web_push_subscriptions_on_access_token_id")
                        .HasFilter("(access_token_id IS NOT NULL)");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_web_push_subscriptions_on_user_id");

                    b.ToTable("web_push_subscriptions", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.WebSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("web_settings_pkey");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("index_web_settings_on_user_id");

                    b.ToTable("web_settings", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Webhook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("true");

                    b.Property<string[]>("Events")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("events")
                        .HasDefaultValueSql("'{}'::character varying[]");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("secret")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("webhooks_pkey");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("index_webhooks_on_url");

                    b.ToTable("webhooks", (string)null);
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Account", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "MovedToAccount")
                        .WithMany("InverseMovedToAccount")
                        .HasForeignKey("MovedToAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_2320833084");

                    b.Navigation("MovedToAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountAlias", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountAliases")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_fc91575d08");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountConversation", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountConversations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_6f5278b6e9");

                    b.HasOne("Smilodon.Domain.Models.Conversation", "Conversation")
                        .WithMany("AccountConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_1491654f9f");

                    b.Navigation("Account");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountDeletionRequest", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountDeletionRequests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_45bf2626b9");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountDomainBlock", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountDomainBlocks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_206c6029bd");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountMigration", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountMigrationAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_c9f701caaf");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("AccountMigrationTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_d9a8dad070");

                    b.Navigation("Account");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountModerationNote", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountModerationNoteAccounts")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("fk_rails_3f8b75089b");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("AccountModerationNoteTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .IsRequired()
                        .HasConstraintName("fk_rails_dd62ed5ac3");

                    b.Navigation("Account");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountNote", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountNoteAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_4ee4503c69");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("AccountNoteTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_2801b48f1a");

                    b.Navigation("Account");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountPin", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountPinAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_d44979e5dd");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("AccountPinTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_a176e26c37");

                    b.Navigation("Account");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountStat", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithOne("AccountStat")
                        .HasForeignKey("Smilodon.Domain.Models.AccountStat", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_215bb31ff1");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountStatusesCleanupPolicy", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountStatusesCleanupPolicies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_23d5f73cfe");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountWarning", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AccountWarningAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_a65a1bf71b");

                    b.HasOne("Smilodon.Domain.Models.Report", "Report")
                        .WithMany("AccountWarnings")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_8f2bab4b16");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("AccountWarningTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_a7ebbb1e37");

                    b.Navigation("Account");

                    b.Navigation("Report");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AdminActionLog", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AdminActionLogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_a7667297fa");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AnnouncementMute", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AnnouncementMutes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_9c99f8e835");

                    b.HasOne("Smilodon.Domain.Models.Announcement", "Announcement")
                        .WithMany("AnnouncementMutes")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_e35401adf1");

                    b.Navigation("Account");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AnnouncementReaction", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AnnouncementReactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_7444ad831f");

                    b.HasOne("Smilodon.Domain.Models.Announcement", "Announcement")
                        .WithMany("AnnouncementReactions")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_a1226eaa5c");

                    b.HasOne("Smilodon.Domain.Models.CustomEmoji", "CustomEmoji")
                        .WithMany("AnnouncementReactions")
                        .HasForeignKey("CustomEmojiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_b742c91c0e");

                    b.Navigation("Account");

                    b.Navigation("Announcement");

                    b.Navigation("CustomEmoji");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Appeal", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("AppealAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_ea84881569");

                    b.HasOne("Smilodon.Domain.Models.AccountWarning", "AccountWarning")
                        .WithOne("Appeal")
                        .HasForeignKey("Smilodon.Domain.Models.Appeal", "AccountWarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_a99f14546e");

                    b.HasOne("Smilodon.Domain.Models.Account", "ApprovedByAccount")
                        .WithMany("AppealApprovedByAccounts")
                        .HasForeignKey("ApprovedByAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_9deb2f63ad");

                    b.HasOne("Smilodon.Domain.Models.Account", "RejectedByAccount")
                        .WithMany("AppealRejectedByAccounts")
                        .HasForeignKey("RejectedByAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_501c3a6e13");

                    b.Navigation("Account");

                    b.Navigation("AccountWarning");

                    b.Navigation("ApprovedByAccount");

                    b.Navigation("RejectedByAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Backup", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithMany("Backups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_096669d221");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Block", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("BlockAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_4269e03e65");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("BlockTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_9571bfabc1");

                    b.Navigation("Account");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Bookmark", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("Bookmarks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_9f6ac182a6");

                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithMany("Bookmarks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_11207ffcfd");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CanonicalEmailBlock", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "ReferenceAccount")
                        .WithMany("CanonicalEmailBlocks")
                        .HasForeignKey("ReferenceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_1ecb262096");

                    b.Navigation("ReferenceAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ConversationMute", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("ConversationMutes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_225b4212bb");

                    b.HasOne("Smilodon.Domain.Models.Conversation", "Conversation")
                        .WithMany("ConversationMutes")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_5ab139311f");

                    b.Navigation("Account");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomFilter", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("CustomFilters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_8b8d786993");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomFilterKeyword", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.CustomFilter", "CustomFilter")
                        .WithMany("CustomFilterKeywords")
                        .HasForeignKey("CustomFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_5a49a74012");

                    b.Navigation("CustomFilter");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomFilterStatus", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.CustomFilter", "CustomFilter")
                        .WithMany("CustomFilterStatuses")
                        .HasForeignKey("CustomFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_e2ddaf5b14");

                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithMany("CustomFilterStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_2f6d20c0cf");

                    b.Navigation("CustomFilter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Device", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.OAuthAccessToken", "AccessToken")
                        .WithMany("Devices")
                        .HasForeignKey("AccessTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_393f74df68");

                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("Devices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_a796b75798");

                    b.Navigation("AccessToken");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.EmailDomainBlock", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.EmailDomainBlock", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_408efe0a15");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.EncryptedMessage", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Device", "Device")
                        .WithMany("EncryptedMessages")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_a83e4df7ae");

                    b.HasOne("Smilodon.Domain.Models.Account", "FromAccount")
                        .WithMany("EncryptedMessages")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_a42ad0f8d5");

                    b.Navigation("Device");

                    b.Navigation("FromAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Favourite", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("Favourites")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_5eb6c2b873");

                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithMany("Favourites")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_b0e856845e");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.FeaturedTag", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("FeaturedTags")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_174efcf15f");

                    b.HasOne("Smilodon.Domain.Models.Tag", "Tag")
                        .WithMany("FeaturedTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_23a9055c7c");

                    b.Navigation("Account");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Follow", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("FollowAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_32ed1b5560");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("FollowTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_745ca29eac");

                    b.Navigation("Account");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.FollowRecommendationSuppression", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithOne("FollowRecommendationSuppression")
                        .HasForeignKey("Smilodon.Domain.Models.FollowRecommendationSuppression", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_dfb9a1dbe2");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.FollowRequest", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("FollowRequestAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_76d644b0e7");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("FollowRequestTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_9291ec025d");

                    b.Navigation("Account");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Identity", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithMany("Identities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_bea040f377");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Import", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("Imports")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_6db1b6e408");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Invite", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithMany("Invites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_ff69dbb2ac");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.List", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("Lists")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_3853b78dac");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ListAccount", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("ListAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_85fee9d6ab");

                    b.HasOne("Smilodon.Domain.Models.Follow", "Follow")
                        .WithMany("ListAccounts")
                        .HasForeignKey("FollowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_40f9cc29f1");

                    b.HasOne("Smilodon.Domain.Models.List", "List")
                        .WithMany("ListAccounts")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_e54e356c88");

                    b.Navigation("Account");

                    b.Navigation("Follow");

                    b.Navigation("List");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.LoginActivity", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithMany("LoginActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_e4b6396b41");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Marker", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithMany("Markers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_a7009bc2b6");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.MediaAttachment", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("MediaAttachments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_96dd81e81b");

                    b.HasOne("Smilodon.Domain.Models.ScheduledStatus", "ScheduledStatus")
                        .WithMany("MediaAttachments")
                        .HasForeignKey("ScheduledStatusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_31fc5aeef1");

                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithMany("MediaAttachments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_3ec0cfdd70");

                    b.Navigation("Account");

                    b.Navigation("ScheduledStatus");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Mention", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("Mentions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_970d43f9d1");

                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithMany("Mentions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_59edbe2887");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Mute", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("MuteAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_b8d8daf315");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("MuteTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_eecff219ea");

                    b.Navigation("Account");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Notification", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("NotificationAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_c141c8ee55");

                    b.HasOne("Smilodon.Domain.Models.Account", "FromAccount")
                        .WithMany("NotificationFromAccounts")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fbd6b0bf9e");

                    b.Navigation("Account");

                    b.Navigation("FromAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OAuthAccessGrant", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.OAuthApplication", "Application")
                        .WithMany("OAuthAccessGrants")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_34d54b0a33");

                    b.HasOne("Smilodon.Domain.Models.User", "ResourceOwner")
                        .WithMany("OAuthAccessGrants")
                        .HasForeignKey("ResourceOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_63b044929b");

                    b.Navigation("Application");

                    b.Navigation("ResourceOwner");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OAuthAccessToken", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.OAuthApplication", "Application")
                        .WithMany("OAuthAccessTokens")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_f5fc4c1ee3");

                    b.HasOne("Smilodon.Domain.Models.User", "ResourceOwner")
                        .WithMany("OAuthAccessTokens")
                        .HasForeignKey("ResourceOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_e84df68546");

                    b.Navigation("Application");

                    b.Navigation("ResourceOwner");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OAuthApplication", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.User", "Owner")
                        .WithMany("OAuthApplications")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_b0988c7c0a");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OneTimeKey", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Device", "Device")
                        .WithMany("OneTimeKeys")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_d3edd8c878");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Poll", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("Polls")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_5b19a0c011");

                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithMany("Polls")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_3e0d9f1115");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.PollVote", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("PollVotes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_b6c18cf44a");

                    b.HasOne("Smilodon.Domain.Models.Poll", "Poll")
                        .WithMany("PollVotes")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_a6e6974b7e");

                    b.Navigation("Account");

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.PreviewCardTrend", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.PreviewCard", "PreviewCard")
                        .WithOne("PreviewCardTrend")
                        .HasForeignKey("Smilodon.Domain.Models.PreviewCardTrend", "PreviewCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_371593db34");

                    b.Navigation("PreviewCard");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Report", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("ReportAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_4b81f7522c");

                    b.HasOne("Smilodon.Domain.Models.Account", "ActionTakenByAccount")
                        .WithMany("ReportActionTakenByAccounts")
                        .HasForeignKey("ActionTakenByAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_bca45b75fd");

                    b.HasOne("Smilodon.Domain.Models.Account", "AssignedAccount")
                        .WithMany("ReportAssignedAccounts")
                        .HasForeignKey("AssignedAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_4e7a498fb4");

                    b.HasOne("Smilodon.Domain.Models.Account", "TargetAccount")
                        .WithMany("ReportTargetAccounts")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_eb37af34f0");

                    b.Navigation("Account");

                    b.Navigation("ActionTakenByAccount");

                    b.Navigation("AssignedAccount");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ReportNote", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("ReportNotes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_cae66353f3");

                    b.HasOne("Smilodon.Domain.Models.Report", "Report")
                        .WithMany("ReportNotes")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_7fa83a61eb");

                    b.Navigation("Account");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ScheduledStatus", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("ScheduledStatuses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_23bd9018f9");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.SessionActivation", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.OAuthAccessToken", "AccessToken")
                        .WithMany("SessionActivations")
                        .HasForeignKey("AccessTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_957e5bda89");

                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithMany("SessionActivations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_e5fda67334");

                    b.Navigation("AccessToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Status", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("StatusAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_9bda1543f7");

                    b.HasOne("Smilodon.Domain.Models.Account", "InReplyToAccount")
                        .WithMany("StatusInReplyToAccounts")
                        .HasForeignKey("InReplyToAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_c7fa917661");

                    b.HasOne("Smilodon.Domain.Models.Status", "InReplyTo")
                        .WithMany("InverseInReplyTo")
                        .HasForeignKey("InReplyToId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_94a6f70399");

                    b.HasOne("Smilodon.Domain.Models.Status", "ReblogOf")
                        .WithMany("InverseReblogOf")
                        .HasForeignKey("ReblogOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_256483a9ab");

                    b.Navigation("Account");

                    b.Navigation("InReplyTo");

                    b.Navigation("InReplyToAccount");

                    b.Navigation("ReblogOf");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusEdit", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("StatusEdits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_dc8988c545");

                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithMany("StatusEdits")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_a960f234a0");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusPin", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("StatusPins")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_d4cb435b62");

                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithMany("StatusPins")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_65c05552f1");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusStat", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithOne("StatusStat")
                        .HasForeignKey("Smilodon.Domain.Models.StatusStat", "StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_4a247aac42");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusTag", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_df0fe11427");

                    b.HasOne("Smilodon.Domain.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_3081861e21");

                    b.Navigation("Status");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.StatusTrend", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("StatusTrends")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_a6b527ea49");

                    b.HasOne("Smilodon.Domain.Models.Status", "Status")
                        .WithOne("StatusTrend")
                        .HasForeignKey("Smilodon.Domain.Models.StatusTrend", "StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_68c610dc1a");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.TagFollow", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("TagFollows")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_091e831473");

                    b.HasOne("Smilodon.Domain.Models.Tag", "Tag")
                        .WithMany("TagFollows")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rails_0deefe597f");

                    b.Navigation("Account");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Tombstone", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("Tombstones")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_f95b861449");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.User", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_50500f500d");

                    b.HasOne("Smilodon.Domain.Models.OAuthApplication", "CreatedByApplication")
                        .WithMany("Users")
                        .HasForeignKey("CreatedByApplicationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_ecc9536e7c");

                    b.HasOne("Smilodon.Domain.Models.Invite", "Invite")
                        .WithMany("Users")
                        .HasForeignKey("InviteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_8fb2a43e88");

                    b.HasOne("Smilodon.Domain.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rails_642f17018b");

                    b.Navigation("Account");

                    b.Navigation("CreatedByApplication");

                    b.Navigation("Invite");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.UserInviteRequest", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithMany("UserInviteRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_3773f15361");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.WebAuthnCredential", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithMany("WebAuthnCredentials")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_rails_a4355aef77");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.WebPushSubscription", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.OAuthAccessToken", "AccessToken")
                        .WithMany("WebPushSubscriptions")
                        .HasForeignKey("AccessTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_751a9f390b");

                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithMany("WebPushSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rails_b006f28dac");

                    b.Navigation("AccessToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.WebSetting", b =>
                {
                    b.HasOne("Smilodon.Domain.Models.User", "User")
                        .WithOne("WebSetting")
                        .HasForeignKey("Smilodon.Domain.Models.WebSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_11910667b2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Account", b =>
                {
                    b.Navigation("AccountAliases");

                    b.Navigation("AccountConversations");

                    b.Navigation("AccountDeletionRequests");

                    b.Navigation("AccountDomainBlocks");

                    b.Navigation("AccountMigrationAccounts");

                    b.Navigation("AccountMigrationTargetAccounts");

                    b.Navigation("AccountModerationNoteAccounts");

                    b.Navigation("AccountModerationNoteTargetAccounts");

                    b.Navigation("AccountNoteAccounts");

                    b.Navigation("AccountNoteTargetAccounts");

                    b.Navigation("AccountPinAccounts");

                    b.Navigation("AccountPinTargetAccounts");

                    b.Navigation("AccountStat")
                        .IsRequired();

                    b.Navigation("AccountStatusesCleanupPolicies");

                    b.Navigation("AccountWarningAccounts");

                    b.Navigation("AccountWarningTargetAccounts");

                    b.Navigation("AdminActionLogs");

                    b.Navigation("AnnouncementMutes");

                    b.Navigation("AnnouncementReactions");

                    b.Navigation("AppealAccounts");

                    b.Navigation("AppealApprovedByAccounts");

                    b.Navigation("AppealRejectedByAccounts");

                    b.Navigation("BlockAccounts");

                    b.Navigation("BlockTargetAccounts");

                    b.Navigation("Bookmarks");

                    b.Navigation("CanonicalEmailBlocks");

                    b.Navigation("ConversationMutes");

                    b.Navigation("CustomFilters");

                    b.Navigation("Devices");

                    b.Navigation("EncryptedMessages");

                    b.Navigation("Favourites");

                    b.Navigation("FeaturedTags");

                    b.Navigation("FollowAccounts");

                    b.Navigation("FollowRecommendationSuppression")
                        .IsRequired();

                    b.Navigation("FollowRequestAccounts");

                    b.Navigation("FollowRequestTargetAccounts");

                    b.Navigation("FollowTargetAccounts");

                    b.Navigation("Imports");

                    b.Navigation("InverseMovedToAccount");

                    b.Navigation("ListAccounts");

                    b.Navigation("Lists");

                    b.Navigation("MediaAttachments");

                    b.Navigation("Mentions");

                    b.Navigation("MuteAccounts");

                    b.Navigation("MuteTargetAccounts");

                    b.Navigation("NotificationAccounts");

                    b.Navigation("NotificationFromAccounts");

                    b.Navigation("PollVotes");

                    b.Navigation("Polls");

                    b.Navigation("ReportAccounts");

                    b.Navigation("ReportActionTakenByAccounts");

                    b.Navigation("ReportAssignedAccounts");

                    b.Navigation("ReportNotes");

                    b.Navigation("ReportTargetAccounts");

                    b.Navigation("ScheduledStatuses");

                    b.Navigation("StatusAccounts");

                    b.Navigation("StatusEdits");

                    b.Navigation("StatusInReplyToAccounts");

                    b.Navigation("StatusPins");

                    b.Navigation("StatusTrends");

                    b.Navigation("TagFollows");

                    b.Navigation("Tombstones");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.AccountWarning", b =>
                {
                    b.Navigation("Appeal")
                        .IsRequired();
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Announcement", b =>
                {
                    b.Navigation("AnnouncementMutes");

                    b.Navigation("AnnouncementReactions");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Conversation", b =>
                {
                    b.Navigation("AccountConversations");

                    b.Navigation("ConversationMutes");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomEmoji", b =>
                {
                    b.Navigation("AnnouncementReactions");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.CustomFilter", b =>
                {
                    b.Navigation("CustomFilterKeywords");

                    b.Navigation("CustomFilterStatuses");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Device", b =>
                {
                    b.Navigation("EncryptedMessages");

                    b.Navigation("OneTimeKeys");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.EmailDomainBlock", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Follow", b =>
                {
                    b.Navigation("ListAccounts");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Invite", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.List", b =>
                {
                    b.Navigation("ListAccounts");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OAuthAccessToken", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("SessionActivations");

                    b.Navigation("WebPushSubscriptions");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.OAuthApplication", b =>
                {
                    b.Navigation("OAuthAccessGrants");

                    b.Navigation("OAuthAccessTokens");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Poll", b =>
                {
                    b.Navigation("PollVotes");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.PreviewCard", b =>
                {
                    b.Navigation("PreviewCardTrend")
                        .IsRequired();
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Report", b =>
                {
                    b.Navigation("AccountWarnings");

                    b.Navigation("ReportNotes");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.ScheduledStatus", b =>
                {
                    b.Navigation("MediaAttachments");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Status", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("CustomFilterStatuses");

                    b.Navigation("Favourites");

                    b.Navigation("InverseInReplyTo");

                    b.Navigation("InverseReblogOf");

                    b.Navigation("MediaAttachments");

                    b.Navigation("Mentions");

                    b.Navigation("Polls");

                    b.Navigation("StatusEdits");

                    b.Navigation("StatusPins");

                    b.Navigation("StatusStat")
                        .IsRequired();

                    b.Navigation("StatusTrend")
                        .IsRequired();
                });

            modelBuilder.Entity("Smilodon.Domain.Models.Tag", b =>
                {
                    b.Navigation("FeaturedTags");

                    b.Navigation("TagFollows");
                });

            modelBuilder.Entity("Smilodon.Domain.Models.User", b =>
                {
                    b.Navigation("Backups");

                    b.Navigation("Identities");

                    b.Navigation("Invites");

                    b.Navigation("LoginActivities");

                    b.Navigation("Markers");

                    b.Navigation("OAuthAccessGrants");

                    b.Navigation("OAuthAccessTokens");

                    b.Navigation("OAuthApplications");

                    b.Navigation("SessionActivations");

                    b.Navigation("UserInviteRequests");

                    b.Navigation("WebAuthnCredentials");

                    b.Navigation("WebPushSubscriptions");

                    b.Navigation("WebSetting")
                        .IsRequired();
                });

            modelBuilder.Entity("Smilodon.Domain.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
